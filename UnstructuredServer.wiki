This is the ''very sparse'' documentation for the unstructured grid python server.

This server is designed to work with unstructured triangular meshes from ocean model output stored in compliant netcdf files, typically accessible through Opendap enabled by a Thredds data server. The goal is to do simple serverside computations like averages, regridding and subsetting, while returning data in a variety of formats including text, shapefile, kml and images.

'''Django Webapplication Framework'''
This webserver is is written in python and uses the ''Django'' framework. It is intended to be embedded in an Apache webserver installation running mod_python. This provides a robust and fast webserver for interacting with unstructured triangular grid data.

'''Requirements'''
''Python''
The server requires that the platform has:
* Python 2.7
* The following python packages:
** numpy
** scipy
** matplotlib
** basemap
** django
** netcdf4-python
** pyshp
** parallelpython
** markdown-python
''Apache''
The server is intended to be used with Apache 2.x prefork mpw module and it is important that the mod_python plugin is installed.


'''Triangular Mesh Data Format'''
As of this writing the data manager expects that the cell and node values are stored as 3d matrices of shape [time depth index], where index is the node or cell index. The length of index corresponds to the length of the geographic coordinate dimensions for the variable. ''lonc''/''latc'' are expected as the geographic coordinate variables for cell variable values and ''lon''/''lat'' are expected as the geographic coordinate variables for node located variable values.

Topology and time variables are also needed by the server to do its job and for now the names of which are specified manually during the setup script execution. 

'''Web Server Requests'''
There are a variety of implemented GET request templates. The root request template is easy to remember and useful if accessed by users(human people) directly through their browser's url window.

 http://yourserver.org/?latmax=46&latmin=38&lonmin=-75&lonmax=-65&datestart=1980-1-1T00:00:00&dateend=1980-1-1T00:00:00&width=10&height=10&layer=1&actions=regrid,data,grid

The server also implements a WMS style GET request template to aid webmap clients in accessing the web map images of model data. In practice on a given WMS request a handler takes the incoming request and converts it to the root request template style and passes it along to the function that does the work for all requests.

 TODO: get example wms request from Charlton

On the todo list is an implementation of the OCG standards request for web processing.

'''To Do For the Unstructured Sura Fork:'''
* Implementation of WMS request handler
* Implement model naive setup script that uses the data file to pull lat/lon and time.
** Then, setup server to do this everyday or on command by GET request.
* Refactor the modules and actions in the main view into a unstructured server package of function sets
* Implementation of the OCG standards request for web processing
* Implement nodes
* Implement variable selection


